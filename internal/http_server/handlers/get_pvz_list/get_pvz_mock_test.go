// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package getpvzlist

//go:generate minimock -i github.com/nabishec/avito_pvz_service/internal/http_server/handlers/get_pvz_list.GetPVZ -o get_pvz_mock_test.go -n GetPVZMock -p getpvzlist

import (
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/nabishec/avito_pvz_service/internal/model"
)

// GetPVZMock implements GetPVZ
type GetPVZMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetPVZList          func(startDate time.Time, endDate time.Time, page int, limit int) (ppa1 []*model.PVZWithRecep, err error)
	funcGetPVZListOrigin    string
	inspectFuncGetPVZList   func(startDate time.Time, endDate time.Time, page int, limit int)
	afterGetPVZListCounter  uint64
	beforeGetPVZListCounter uint64
	GetPVZListMock          mGetPVZMockGetPVZList
}

// NewGetPVZMock returns a mock for GetPVZ
func NewGetPVZMock(t minimock.Tester) *GetPVZMock {
	m := &GetPVZMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetPVZListMock = mGetPVZMockGetPVZList{mock: m}
	m.GetPVZListMock.callArgs = []*GetPVZMockGetPVZListParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mGetPVZMockGetPVZList struct {
	optional           bool
	mock               *GetPVZMock
	defaultExpectation *GetPVZMockGetPVZListExpectation
	expectations       []*GetPVZMockGetPVZListExpectation

	callArgs []*GetPVZMockGetPVZListParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// GetPVZMockGetPVZListExpectation specifies expectation struct of the GetPVZ.GetPVZList
type GetPVZMockGetPVZListExpectation struct {
	mock               *GetPVZMock
	params             *GetPVZMockGetPVZListParams
	paramPtrs          *GetPVZMockGetPVZListParamPtrs
	expectationOrigins GetPVZMockGetPVZListExpectationOrigins
	results            *GetPVZMockGetPVZListResults
	returnOrigin       string
	Counter            uint64
}

// GetPVZMockGetPVZListParams contains parameters of the GetPVZ.GetPVZList
type GetPVZMockGetPVZListParams struct {
	startDate time.Time
	endDate   time.Time
	page      int
	limit     int
}

// GetPVZMockGetPVZListParamPtrs contains pointers to parameters of the GetPVZ.GetPVZList
type GetPVZMockGetPVZListParamPtrs struct {
	startDate *time.Time
	endDate   *time.Time
	page      *int
	limit     *int
}

// GetPVZMockGetPVZListResults contains results of the GetPVZ.GetPVZList
type GetPVZMockGetPVZListResults struct {
	ppa1 []*model.PVZWithRecep
	err  error
}

// GetPVZMockGetPVZListOrigins contains origins of expectations of the GetPVZ.GetPVZList
type GetPVZMockGetPVZListExpectationOrigins struct {
	origin          string
	originStartDate string
	originEndDate   string
	originPage      string
	originLimit     string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetPVZList *mGetPVZMockGetPVZList) Optional() *mGetPVZMockGetPVZList {
	mmGetPVZList.optional = true
	return mmGetPVZList
}

// Expect sets up expected params for GetPVZ.GetPVZList
func (mmGetPVZList *mGetPVZMockGetPVZList) Expect(startDate time.Time, endDate time.Time, page int, limit int) *mGetPVZMockGetPVZList {
	if mmGetPVZList.mock.funcGetPVZList != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by Set")
	}

	if mmGetPVZList.defaultExpectation == nil {
		mmGetPVZList.defaultExpectation = &GetPVZMockGetPVZListExpectation{}
	}

	if mmGetPVZList.defaultExpectation.paramPtrs != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by ExpectParams functions")
	}

	mmGetPVZList.defaultExpectation.params = &GetPVZMockGetPVZListParams{startDate, endDate, page, limit}
	mmGetPVZList.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetPVZList.expectations {
		if minimock.Equal(e.params, mmGetPVZList.defaultExpectation.params) {
			mmGetPVZList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetPVZList.defaultExpectation.params)
		}
	}

	return mmGetPVZList
}

// ExpectStartDateParam1 sets up expected param startDate for GetPVZ.GetPVZList
func (mmGetPVZList *mGetPVZMockGetPVZList) ExpectStartDateParam1(startDate time.Time) *mGetPVZMockGetPVZList {
	if mmGetPVZList.mock.funcGetPVZList != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by Set")
	}

	if mmGetPVZList.defaultExpectation == nil {
		mmGetPVZList.defaultExpectation = &GetPVZMockGetPVZListExpectation{}
	}

	if mmGetPVZList.defaultExpectation.params != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by Expect")
	}

	if mmGetPVZList.defaultExpectation.paramPtrs == nil {
		mmGetPVZList.defaultExpectation.paramPtrs = &GetPVZMockGetPVZListParamPtrs{}
	}
	mmGetPVZList.defaultExpectation.paramPtrs.startDate = &startDate
	mmGetPVZList.defaultExpectation.expectationOrigins.originStartDate = minimock.CallerInfo(1)

	return mmGetPVZList
}

// ExpectEndDateParam2 sets up expected param endDate for GetPVZ.GetPVZList
func (mmGetPVZList *mGetPVZMockGetPVZList) ExpectEndDateParam2(endDate time.Time) *mGetPVZMockGetPVZList {
	if mmGetPVZList.mock.funcGetPVZList != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by Set")
	}

	if mmGetPVZList.defaultExpectation == nil {
		mmGetPVZList.defaultExpectation = &GetPVZMockGetPVZListExpectation{}
	}

	if mmGetPVZList.defaultExpectation.params != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by Expect")
	}

	if mmGetPVZList.defaultExpectation.paramPtrs == nil {
		mmGetPVZList.defaultExpectation.paramPtrs = &GetPVZMockGetPVZListParamPtrs{}
	}
	mmGetPVZList.defaultExpectation.paramPtrs.endDate = &endDate
	mmGetPVZList.defaultExpectation.expectationOrigins.originEndDate = minimock.CallerInfo(1)

	return mmGetPVZList
}

// ExpectPageParam3 sets up expected param page for GetPVZ.GetPVZList
func (mmGetPVZList *mGetPVZMockGetPVZList) ExpectPageParam3(page int) *mGetPVZMockGetPVZList {
	if mmGetPVZList.mock.funcGetPVZList != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by Set")
	}

	if mmGetPVZList.defaultExpectation == nil {
		mmGetPVZList.defaultExpectation = &GetPVZMockGetPVZListExpectation{}
	}

	if mmGetPVZList.defaultExpectation.params != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by Expect")
	}

	if mmGetPVZList.defaultExpectation.paramPtrs == nil {
		mmGetPVZList.defaultExpectation.paramPtrs = &GetPVZMockGetPVZListParamPtrs{}
	}
	mmGetPVZList.defaultExpectation.paramPtrs.page = &page
	mmGetPVZList.defaultExpectation.expectationOrigins.originPage = minimock.CallerInfo(1)

	return mmGetPVZList
}

// ExpectLimitParam4 sets up expected param limit for GetPVZ.GetPVZList
func (mmGetPVZList *mGetPVZMockGetPVZList) ExpectLimitParam4(limit int) *mGetPVZMockGetPVZList {
	if mmGetPVZList.mock.funcGetPVZList != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by Set")
	}

	if mmGetPVZList.defaultExpectation == nil {
		mmGetPVZList.defaultExpectation = &GetPVZMockGetPVZListExpectation{}
	}

	if mmGetPVZList.defaultExpectation.params != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by Expect")
	}

	if mmGetPVZList.defaultExpectation.paramPtrs == nil {
		mmGetPVZList.defaultExpectation.paramPtrs = &GetPVZMockGetPVZListParamPtrs{}
	}
	mmGetPVZList.defaultExpectation.paramPtrs.limit = &limit
	mmGetPVZList.defaultExpectation.expectationOrigins.originLimit = minimock.CallerInfo(1)

	return mmGetPVZList
}

// Inspect accepts an inspector function that has same arguments as the GetPVZ.GetPVZList
func (mmGetPVZList *mGetPVZMockGetPVZList) Inspect(f func(startDate time.Time, endDate time.Time, page int, limit int)) *mGetPVZMockGetPVZList {
	if mmGetPVZList.mock.inspectFuncGetPVZList != nil {
		mmGetPVZList.mock.t.Fatalf("Inspect function is already set for GetPVZMock.GetPVZList")
	}

	mmGetPVZList.mock.inspectFuncGetPVZList = f

	return mmGetPVZList
}

// Return sets up results that will be returned by GetPVZ.GetPVZList
func (mmGetPVZList *mGetPVZMockGetPVZList) Return(ppa1 []*model.PVZWithRecep, err error) *GetPVZMock {
	if mmGetPVZList.mock.funcGetPVZList != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by Set")
	}

	if mmGetPVZList.defaultExpectation == nil {
		mmGetPVZList.defaultExpectation = &GetPVZMockGetPVZListExpectation{mock: mmGetPVZList.mock}
	}
	mmGetPVZList.defaultExpectation.results = &GetPVZMockGetPVZListResults{ppa1, err}
	mmGetPVZList.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetPVZList.mock
}

// Set uses given function f to mock the GetPVZ.GetPVZList method
func (mmGetPVZList *mGetPVZMockGetPVZList) Set(f func(startDate time.Time, endDate time.Time, page int, limit int) (ppa1 []*model.PVZWithRecep, err error)) *GetPVZMock {
	if mmGetPVZList.defaultExpectation != nil {
		mmGetPVZList.mock.t.Fatalf("Default expectation is already set for the GetPVZ.GetPVZList method")
	}

	if len(mmGetPVZList.expectations) > 0 {
		mmGetPVZList.mock.t.Fatalf("Some expectations are already set for the GetPVZ.GetPVZList method")
	}

	mmGetPVZList.mock.funcGetPVZList = f
	mmGetPVZList.mock.funcGetPVZListOrigin = minimock.CallerInfo(1)
	return mmGetPVZList.mock
}

// When sets expectation for the GetPVZ.GetPVZList which will trigger the result defined by the following
// Then helper
func (mmGetPVZList *mGetPVZMockGetPVZList) When(startDate time.Time, endDate time.Time, page int, limit int) *GetPVZMockGetPVZListExpectation {
	if mmGetPVZList.mock.funcGetPVZList != nil {
		mmGetPVZList.mock.t.Fatalf("GetPVZMock.GetPVZList mock is already set by Set")
	}

	expectation := &GetPVZMockGetPVZListExpectation{
		mock:               mmGetPVZList.mock,
		params:             &GetPVZMockGetPVZListParams{startDate, endDate, page, limit},
		expectationOrigins: GetPVZMockGetPVZListExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetPVZList.expectations = append(mmGetPVZList.expectations, expectation)
	return expectation
}

// Then sets up GetPVZ.GetPVZList return parameters for the expectation previously defined by the When method
func (e *GetPVZMockGetPVZListExpectation) Then(ppa1 []*model.PVZWithRecep, err error) *GetPVZMock {
	e.results = &GetPVZMockGetPVZListResults{ppa1, err}
	return e.mock
}

// Times sets number of times GetPVZ.GetPVZList should be invoked
func (mmGetPVZList *mGetPVZMockGetPVZList) Times(n uint64) *mGetPVZMockGetPVZList {
	if n == 0 {
		mmGetPVZList.mock.t.Fatalf("Times of GetPVZMock.GetPVZList mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetPVZList.expectedInvocations, n)
	mmGetPVZList.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetPVZList
}

func (mmGetPVZList *mGetPVZMockGetPVZList) invocationsDone() bool {
	if len(mmGetPVZList.expectations) == 0 && mmGetPVZList.defaultExpectation == nil && mmGetPVZList.mock.funcGetPVZList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetPVZList.mock.afterGetPVZListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetPVZList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetPVZList implements GetPVZ
func (mmGetPVZList *GetPVZMock) GetPVZList(startDate time.Time, endDate time.Time, page int, limit int) (ppa1 []*model.PVZWithRecep, err error) {
	mm_atomic.AddUint64(&mmGetPVZList.beforeGetPVZListCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPVZList.afterGetPVZListCounter, 1)

	mmGetPVZList.t.Helper()

	if mmGetPVZList.inspectFuncGetPVZList != nil {
		mmGetPVZList.inspectFuncGetPVZList(startDate, endDate, page, limit)
	}

	mm_params := GetPVZMockGetPVZListParams{startDate, endDate, page, limit}

	// Record call args
	mmGetPVZList.GetPVZListMock.mutex.Lock()
	mmGetPVZList.GetPVZListMock.callArgs = append(mmGetPVZList.GetPVZListMock.callArgs, &mm_params)
	mmGetPVZList.GetPVZListMock.mutex.Unlock()

	for _, e := range mmGetPVZList.GetPVZListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ppa1, e.results.err
		}
	}

	if mmGetPVZList.GetPVZListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPVZList.GetPVZListMock.defaultExpectation.Counter, 1)
		mm_want := mmGetPVZList.GetPVZListMock.defaultExpectation.params
		mm_want_ptrs := mmGetPVZList.GetPVZListMock.defaultExpectation.paramPtrs

		mm_got := GetPVZMockGetPVZListParams{startDate, endDate, page, limit}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.startDate != nil && !minimock.Equal(*mm_want_ptrs.startDate, mm_got.startDate) {
				mmGetPVZList.t.Errorf("GetPVZMock.GetPVZList got unexpected parameter startDate, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetPVZList.GetPVZListMock.defaultExpectation.expectationOrigins.originStartDate, *mm_want_ptrs.startDate, mm_got.startDate, minimock.Diff(*mm_want_ptrs.startDate, mm_got.startDate))
			}

			if mm_want_ptrs.endDate != nil && !minimock.Equal(*mm_want_ptrs.endDate, mm_got.endDate) {
				mmGetPVZList.t.Errorf("GetPVZMock.GetPVZList got unexpected parameter endDate, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetPVZList.GetPVZListMock.defaultExpectation.expectationOrigins.originEndDate, *mm_want_ptrs.endDate, mm_got.endDate, minimock.Diff(*mm_want_ptrs.endDate, mm_got.endDate))
			}

			if mm_want_ptrs.page != nil && !minimock.Equal(*mm_want_ptrs.page, mm_got.page) {
				mmGetPVZList.t.Errorf("GetPVZMock.GetPVZList got unexpected parameter page, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetPVZList.GetPVZListMock.defaultExpectation.expectationOrigins.originPage, *mm_want_ptrs.page, mm_got.page, minimock.Diff(*mm_want_ptrs.page, mm_got.page))
			}

			if mm_want_ptrs.limit != nil && !minimock.Equal(*mm_want_ptrs.limit, mm_got.limit) {
				mmGetPVZList.t.Errorf("GetPVZMock.GetPVZList got unexpected parameter limit, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetPVZList.GetPVZListMock.defaultExpectation.expectationOrigins.originLimit, *mm_want_ptrs.limit, mm_got.limit, minimock.Diff(*mm_want_ptrs.limit, mm_got.limit))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetPVZList.t.Errorf("GetPVZMock.GetPVZList got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetPVZList.GetPVZListMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetPVZList.GetPVZListMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPVZList.t.Fatal("No results are set for the GetPVZMock.GetPVZList")
		}
		return (*mm_results).ppa1, (*mm_results).err
	}
	if mmGetPVZList.funcGetPVZList != nil {
		return mmGetPVZList.funcGetPVZList(startDate, endDate, page, limit)
	}
	mmGetPVZList.t.Fatalf("Unexpected call to GetPVZMock.GetPVZList. %v %v %v %v", startDate, endDate, page, limit)
	return
}

// GetPVZListAfterCounter returns a count of finished GetPVZMock.GetPVZList invocations
func (mmGetPVZList *GetPVZMock) GetPVZListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPVZList.afterGetPVZListCounter)
}

// GetPVZListBeforeCounter returns a count of GetPVZMock.GetPVZList invocations
func (mmGetPVZList *GetPVZMock) GetPVZListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPVZList.beforeGetPVZListCounter)
}

// Calls returns a list of arguments used in each call to GetPVZMock.GetPVZList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetPVZList *mGetPVZMockGetPVZList) Calls() []*GetPVZMockGetPVZListParams {
	mmGetPVZList.mutex.RLock()

	argCopy := make([]*GetPVZMockGetPVZListParams, len(mmGetPVZList.callArgs))
	copy(argCopy, mmGetPVZList.callArgs)

	mmGetPVZList.mutex.RUnlock()

	return argCopy
}

// MinimockGetPVZListDone returns true if the count of the GetPVZList invocations corresponds
// the number of defined expectations
func (m *GetPVZMock) MinimockGetPVZListDone() bool {
	if m.GetPVZListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetPVZListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetPVZListMock.invocationsDone()
}

// MinimockGetPVZListInspect logs each unmet expectation
func (m *GetPVZMock) MinimockGetPVZListInspect() {
	for _, e := range m.GetPVZListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GetPVZMock.GetPVZList at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetPVZListCounter := mm_atomic.LoadUint64(&m.afterGetPVZListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetPVZListMock.defaultExpectation != nil && afterGetPVZListCounter < 1 {
		if m.GetPVZListMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to GetPVZMock.GetPVZList at\n%s", m.GetPVZListMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to GetPVZMock.GetPVZList at\n%s with params: %#v", m.GetPVZListMock.defaultExpectation.expectationOrigins.origin, *m.GetPVZListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPVZList != nil && afterGetPVZListCounter < 1 {
		m.t.Errorf("Expected call to GetPVZMock.GetPVZList at\n%s", m.funcGetPVZListOrigin)
	}

	if !m.GetPVZListMock.invocationsDone() && afterGetPVZListCounter > 0 {
		m.t.Errorf("Expected %d calls to GetPVZMock.GetPVZList at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetPVZListMock.expectedInvocations), m.GetPVZListMock.expectedInvocationsOrigin, afterGetPVZListCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *GetPVZMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetPVZListInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *GetPVZMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *GetPVZMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetPVZListDone()
}
