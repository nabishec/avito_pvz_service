// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package closelastreceptions

//go:generate minimock -i github.com/nabishec/avito_pvz_service/internal/http_server/handlers/close_last_receptions.PostCloseLastReceptions -o post_close_last_receptions_mock_test.go -n PostCloseLastReceptionsMock -p closelastreceptions

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// PostCloseLastReceptionsMock implements PostCloseLastReceptions
type PostCloseLastReceptionsMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCloseLastReceptions          func(ctx context.Context, pvzID uuid.UUID) (err error)
	funcCloseLastReceptionsOrigin    string
	inspectFuncCloseLastReceptions   func(ctx context.Context, pvzID uuid.UUID)
	afterCloseLastReceptionsCounter  uint64
	beforeCloseLastReceptionsCounter uint64
	CloseLastReceptionsMock          mPostCloseLastReceptionsMockCloseLastReceptions
}

// NewPostCloseLastReceptionsMock returns a mock for PostCloseLastReceptions
func NewPostCloseLastReceptionsMock(t minimock.Tester) *PostCloseLastReceptionsMock {
	m := &PostCloseLastReceptionsMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseLastReceptionsMock = mPostCloseLastReceptionsMockCloseLastReceptions{mock: m}
	m.CloseLastReceptionsMock.callArgs = []*PostCloseLastReceptionsMockCloseLastReceptionsParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPostCloseLastReceptionsMockCloseLastReceptions struct {
	optional           bool
	mock               *PostCloseLastReceptionsMock
	defaultExpectation *PostCloseLastReceptionsMockCloseLastReceptionsExpectation
	expectations       []*PostCloseLastReceptionsMockCloseLastReceptionsExpectation

	callArgs []*PostCloseLastReceptionsMockCloseLastReceptionsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PostCloseLastReceptionsMockCloseLastReceptionsExpectation specifies expectation struct of the PostCloseLastReceptions.CloseLastReceptions
type PostCloseLastReceptionsMockCloseLastReceptionsExpectation struct {
	mock               *PostCloseLastReceptionsMock
	params             *PostCloseLastReceptionsMockCloseLastReceptionsParams
	paramPtrs          *PostCloseLastReceptionsMockCloseLastReceptionsParamPtrs
	expectationOrigins PostCloseLastReceptionsMockCloseLastReceptionsExpectationOrigins
	results            *PostCloseLastReceptionsMockCloseLastReceptionsResults
	returnOrigin       string
	Counter            uint64
}

// PostCloseLastReceptionsMockCloseLastReceptionsParams contains parameters of the PostCloseLastReceptions.CloseLastReceptions
type PostCloseLastReceptionsMockCloseLastReceptionsParams struct {
	ctx   context.Context
	pvzID uuid.UUID
}

// PostCloseLastReceptionsMockCloseLastReceptionsParamPtrs contains pointers to parameters of the PostCloseLastReceptions.CloseLastReceptions
type PostCloseLastReceptionsMockCloseLastReceptionsParamPtrs struct {
	ctx   *context.Context
	pvzID *uuid.UUID
}

// PostCloseLastReceptionsMockCloseLastReceptionsResults contains results of the PostCloseLastReceptions.CloseLastReceptions
type PostCloseLastReceptionsMockCloseLastReceptionsResults struct {
	err error
}

// PostCloseLastReceptionsMockCloseLastReceptionsOrigins contains origins of expectations of the PostCloseLastReceptions.CloseLastReceptions
type PostCloseLastReceptionsMockCloseLastReceptionsExpectationOrigins struct {
	origin      string
	originCtx   string
	originPvzID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCloseLastReceptions *mPostCloseLastReceptionsMockCloseLastReceptions) Optional() *mPostCloseLastReceptionsMockCloseLastReceptions {
	mmCloseLastReceptions.optional = true
	return mmCloseLastReceptions
}

// Expect sets up expected params for PostCloseLastReceptions.CloseLastReceptions
func (mmCloseLastReceptions *mPostCloseLastReceptionsMockCloseLastReceptions) Expect(ctx context.Context, pvzID uuid.UUID) *mPostCloseLastReceptionsMockCloseLastReceptions {
	if mmCloseLastReceptions.mock.funcCloseLastReceptions != nil {
		mmCloseLastReceptions.mock.t.Fatalf("PostCloseLastReceptionsMock.CloseLastReceptions mock is already set by Set")
	}

	if mmCloseLastReceptions.defaultExpectation == nil {
		mmCloseLastReceptions.defaultExpectation = &PostCloseLastReceptionsMockCloseLastReceptionsExpectation{}
	}

	if mmCloseLastReceptions.defaultExpectation.paramPtrs != nil {
		mmCloseLastReceptions.mock.t.Fatalf("PostCloseLastReceptionsMock.CloseLastReceptions mock is already set by ExpectParams functions")
	}

	mmCloseLastReceptions.defaultExpectation.params = &PostCloseLastReceptionsMockCloseLastReceptionsParams{ctx, pvzID}
	mmCloseLastReceptions.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCloseLastReceptions.expectations {
		if minimock.Equal(e.params, mmCloseLastReceptions.defaultExpectation.params) {
			mmCloseLastReceptions.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCloseLastReceptions.defaultExpectation.params)
		}
	}

	return mmCloseLastReceptions
}

// ExpectCtxParam1 sets up expected param ctx for PostCloseLastReceptions.CloseLastReceptions
func (mmCloseLastReceptions *mPostCloseLastReceptionsMockCloseLastReceptions) ExpectCtxParam1(ctx context.Context) *mPostCloseLastReceptionsMockCloseLastReceptions {
	if mmCloseLastReceptions.mock.funcCloseLastReceptions != nil {
		mmCloseLastReceptions.mock.t.Fatalf("PostCloseLastReceptionsMock.CloseLastReceptions mock is already set by Set")
	}

	if mmCloseLastReceptions.defaultExpectation == nil {
		mmCloseLastReceptions.defaultExpectation = &PostCloseLastReceptionsMockCloseLastReceptionsExpectation{}
	}

	if mmCloseLastReceptions.defaultExpectation.params != nil {
		mmCloseLastReceptions.mock.t.Fatalf("PostCloseLastReceptionsMock.CloseLastReceptions mock is already set by Expect")
	}

	if mmCloseLastReceptions.defaultExpectation.paramPtrs == nil {
		mmCloseLastReceptions.defaultExpectation.paramPtrs = &PostCloseLastReceptionsMockCloseLastReceptionsParamPtrs{}
	}
	mmCloseLastReceptions.defaultExpectation.paramPtrs.ctx = &ctx
	mmCloseLastReceptions.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCloseLastReceptions
}

// ExpectPvzIDParam2 sets up expected param pvzID for PostCloseLastReceptions.CloseLastReceptions
func (mmCloseLastReceptions *mPostCloseLastReceptionsMockCloseLastReceptions) ExpectPvzIDParam2(pvzID uuid.UUID) *mPostCloseLastReceptionsMockCloseLastReceptions {
	if mmCloseLastReceptions.mock.funcCloseLastReceptions != nil {
		mmCloseLastReceptions.mock.t.Fatalf("PostCloseLastReceptionsMock.CloseLastReceptions mock is already set by Set")
	}

	if mmCloseLastReceptions.defaultExpectation == nil {
		mmCloseLastReceptions.defaultExpectation = &PostCloseLastReceptionsMockCloseLastReceptionsExpectation{}
	}

	if mmCloseLastReceptions.defaultExpectation.params != nil {
		mmCloseLastReceptions.mock.t.Fatalf("PostCloseLastReceptionsMock.CloseLastReceptions mock is already set by Expect")
	}

	if mmCloseLastReceptions.defaultExpectation.paramPtrs == nil {
		mmCloseLastReceptions.defaultExpectation.paramPtrs = &PostCloseLastReceptionsMockCloseLastReceptionsParamPtrs{}
	}
	mmCloseLastReceptions.defaultExpectation.paramPtrs.pvzID = &pvzID
	mmCloseLastReceptions.defaultExpectation.expectationOrigins.originPvzID = minimock.CallerInfo(1)

	return mmCloseLastReceptions
}

// Inspect accepts an inspector function that has same arguments as the PostCloseLastReceptions.CloseLastReceptions
func (mmCloseLastReceptions *mPostCloseLastReceptionsMockCloseLastReceptions) Inspect(f func(ctx context.Context, pvzID uuid.UUID)) *mPostCloseLastReceptionsMockCloseLastReceptions {
	if mmCloseLastReceptions.mock.inspectFuncCloseLastReceptions != nil {
		mmCloseLastReceptions.mock.t.Fatalf("Inspect function is already set for PostCloseLastReceptionsMock.CloseLastReceptions")
	}

	mmCloseLastReceptions.mock.inspectFuncCloseLastReceptions = f

	return mmCloseLastReceptions
}

// Return sets up results that will be returned by PostCloseLastReceptions.CloseLastReceptions
func (mmCloseLastReceptions *mPostCloseLastReceptionsMockCloseLastReceptions) Return(err error) *PostCloseLastReceptionsMock {
	if mmCloseLastReceptions.mock.funcCloseLastReceptions != nil {
		mmCloseLastReceptions.mock.t.Fatalf("PostCloseLastReceptionsMock.CloseLastReceptions mock is already set by Set")
	}

	if mmCloseLastReceptions.defaultExpectation == nil {
		mmCloseLastReceptions.defaultExpectation = &PostCloseLastReceptionsMockCloseLastReceptionsExpectation{mock: mmCloseLastReceptions.mock}
	}
	mmCloseLastReceptions.defaultExpectation.results = &PostCloseLastReceptionsMockCloseLastReceptionsResults{err}
	mmCloseLastReceptions.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCloseLastReceptions.mock
}

// Set uses given function f to mock the PostCloseLastReceptions.CloseLastReceptions method
func (mmCloseLastReceptions *mPostCloseLastReceptionsMockCloseLastReceptions) Set(f func(ctx context.Context, pvzID uuid.UUID) (err error)) *PostCloseLastReceptionsMock {
	if mmCloseLastReceptions.defaultExpectation != nil {
		mmCloseLastReceptions.mock.t.Fatalf("Default expectation is already set for the PostCloseLastReceptions.CloseLastReceptions method")
	}

	if len(mmCloseLastReceptions.expectations) > 0 {
		mmCloseLastReceptions.mock.t.Fatalf("Some expectations are already set for the PostCloseLastReceptions.CloseLastReceptions method")
	}

	mmCloseLastReceptions.mock.funcCloseLastReceptions = f
	mmCloseLastReceptions.mock.funcCloseLastReceptionsOrigin = minimock.CallerInfo(1)
	return mmCloseLastReceptions.mock
}

// When sets expectation for the PostCloseLastReceptions.CloseLastReceptions which will trigger the result defined by the following
// Then helper
func (mmCloseLastReceptions *mPostCloseLastReceptionsMockCloseLastReceptions) When(ctx context.Context, pvzID uuid.UUID) *PostCloseLastReceptionsMockCloseLastReceptionsExpectation {
	if mmCloseLastReceptions.mock.funcCloseLastReceptions != nil {
		mmCloseLastReceptions.mock.t.Fatalf("PostCloseLastReceptionsMock.CloseLastReceptions mock is already set by Set")
	}

	expectation := &PostCloseLastReceptionsMockCloseLastReceptionsExpectation{
		mock:               mmCloseLastReceptions.mock,
		params:             &PostCloseLastReceptionsMockCloseLastReceptionsParams{ctx, pvzID},
		expectationOrigins: PostCloseLastReceptionsMockCloseLastReceptionsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCloseLastReceptions.expectations = append(mmCloseLastReceptions.expectations, expectation)
	return expectation
}

// Then sets up PostCloseLastReceptions.CloseLastReceptions return parameters for the expectation previously defined by the When method
func (e *PostCloseLastReceptionsMockCloseLastReceptionsExpectation) Then(err error) *PostCloseLastReceptionsMock {
	e.results = &PostCloseLastReceptionsMockCloseLastReceptionsResults{err}
	return e.mock
}

// Times sets number of times PostCloseLastReceptions.CloseLastReceptions should be invoked
func (mmCloseLastReceptions *mPostCloseLastReceptionsMockCloseLastReceptions) Times(n uint64) *mPostCloseLastReceptionsMockCloseLastReceptions {
	if n == 0 {
		mmCloseLastReceptions.mock.t.Fatalf("Times of PostCloseLastReceptionsMock.CloseLastReceptions mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCloseLastReceptions.expectedInvocations, n)
	mmCloseLastReceptions.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCloseLastReceptions
}

func (mmCloseLastReceptions *mPostCloseLastReceptionsMockCloseLastReceptions) invocationsDone() bool {
	if len(mmCloseLastReceptions.expectations) == 0 && mmCloseLastReceptions.defaultExpectation == nil && mmCloseLastReceptions.mock.funcCloseLastReceptions == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCloseLastReceptions.mock.afterCloseLastReceptionsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCloseLastReceptions.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CloseLastReceptions implements PostCloseLastReceptions
func (mmCloseLastReceptions *PostCloseLastReceptionsMock) CloseLastReceptions(ctx context.Context, pvzID uuid.UUID) (err error) {
	mm_atomic.AddUint64(&mmCloseLastReceptions.beforeCloseLastReceptionsCounter, 1)
	defer mm_atomic.AddUint64(&mmCloseLastReceptions.afterCloseLastReceptionsCounter, 1)

	mmCloseLastReceptions.t.Helper()

	if mmCloseLastReceptions.inspectFuncCloseLastReceptions != nil {
		mmCloseLastReceptions.inspectFuncCloseLastReceptions(ctx, pvzID)
	}

	mm_params := PostCloseLastReceptionsMockCloseLastReceptionsParams{ctx, pvzID}

	// Record call args
	mmCloseLastReceptions.CloseLastReceptionsMock.mutex.Lock()
	mmCloseLastReceptions.CloseLastReceptionsMock.callArgs = append(mmCloseLastReceptions.CloseLastReceptionsMock.callArgs, &mm_params)
	mmCloseLastReceptions.CloseLastReceptionsMock.mutex.Unlock()

	for _, e := range mmCloseLastReceptions.CloseLastReceptionsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCloseLastReceptions.CloseLastReceptionsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCloseLastReceptions.CloseLastReceptionsMock.defaultExpectation.Counter, 1)
		mm_want := mmCloseLastReceptions.CloseLastReceptionsMock.defaultExpectation.params
		mm_want_ptrs := mmCloseLastReceptions.CloseLastReceptionsMock.defaultExpectation.paramPtrs

		mm_got := PostCloseLastReceptionsMockCloseLastReceptionsParams{ctx, pvzID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCloseLastReceptions.t.Errorf("PostCloseLastReceptionsMock.CloseLastReceptions got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCloseLastReceptions.CloseLastReceptionsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pvzID != nil && !minimock.Equal(*mm_want_ptrs.pvzID, mm_got.pvzID) {
				mmCloseLastReceptions.t.Errorf("PostCloseLastReceptionsMock.CloseLastReceptions got unexpected parameter pvzID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCloseLastReceptions.CloseLastReceptionsMock.defaultExpectation.expectationOrigins.originPvzID, *mm_want_ptrs.pvzID, mm_got.pvzID, minimock.Diff(*mm_want_ptrs.pvzID, mm_got.pvzID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCloseLastReceptions.t.Errorf("PostCloseLastReceptionsMock.CloseLastReceptions got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCloseLastReceptions.CloseLastReceptionsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCloseLastReceptions.CloseLastReceptionsMock.defaultExpectation.results
		if mm_results == nil {
			mmCloseLastReceptions.t.Fatal("No results are set for the PostCloseLastReceptionsMock.CloseLastReceptions")
		}
		return (*mm_results).err
	}
	if mmCloseLastReceptions.funcCloseLastReceptions != nil {
		return mmCloseLastReceptions.funcCloseLastReceptions(ctx, pvzID)
	}
	mmCloseLastReceptions.t.Fatalf("Unexpected call to PostCloseLastReceptionsMock.CloseLastReceptions. %v %v", ctx, pvzID)
	return
}

// CloseLastReceptionsAfterCounter returns a count of finished PostCloseLastReceptionsMock.CloseLastReceptions invocations
func (mmCloseLastReceptions *PostCloseLastReceptionsMock) CloseLastReceptionsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCloseLastReceptions.afterCloseLastReceptionsCounter)
}

// CloseLastReceptionsBeforeCounter returns a count of PostCloseLastReceptionsMock.CloseLastReceptions invocations
func (mmCloseLastReceptions *PostCloseLastReceptionsMock) CloseLastReceptionsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCloseLastReceptions.beforeCloseLastReceptionsCounter)
}

// Calls returns a list of arguments used in each call to PostCloseLastReceptionsMock.CloseLastReceptions.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCloseLastReceptions *mPostCloseLastReceptionsMockCloseLastReceptions) Calls() []*PostCloseLastReceptionsMockCloseLastReceptionsParams {
	mmCloseLastReceptions.mutex.RLock()

	argCopy := make([]*PostCloseLastReceptionsMockCloseLastReceptionsParams, len(mmCloseLastReceptions.callArgs))
	copy(argCopy, mmCloseLastReceptions.callArgs)

	mmCloseLastReceptions.mutex.RUnlock()

	return argCopy
}

// MinimockCloseLastReceptionsDone returns true if the count of the CloseLastReceptions invocations corresponds
// the number of defined expectations
func (m *PostCloseLastReceptionsMock) MinimockCloseLastReceptionsDone() bool {
	if m.CloseLastReceptionsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CloseLastReceptionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CloseLastReceptionsMock.invocationsDone()
}

// MinimockCloseLastReceptionsInspect logs each unmet expectation
func (m *PostCloseLastReceptionsMock) MinimockCloseLastReceptionsInspect() {
	for _, e := range m.CloseLastReceptionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PostCloseLastReceptionsMock.CloseLastReceptions at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCloseLastReceptionsCounter := mm_atomic.LoadUint64(&m.afterCloseLastReceptionsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CloseLastReceptionsMock.defaultExpectation != nil && afterCloseLastReceptionsCounter < 1 {
		if m.CloseLastReceptionsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PostCloseLastReceptionsMock.CloseLastReceptions at\n%s", m.CloseLastReceptionsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PostCloseLastReceptionsMock.CloseLastReceptions at\n%s with params: %#v", m.CloseLastReceptionsMock.defaultExpectation.expectationOrigins.origin, *m.CloseLastReceptionsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCloseLastReceptions != nil && afterCloseLastReceptionsCounter < 1 {
		m.t.Errorf("Expected call to PostCloseLastReceptionsMock.CloseLastReceptions at\n%s", m.funcCloseLastReceptionsOrigin)
	}

	if !m.CloseLastReceptionsMock.invocationsDone() && afterCloseLastReceptionsCounter > 0 {
		m.t.Errorf("Expected %d calls to PostCloseLastReceptionsMock.CloseLastReceptions at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CloseLastReceptionsMock.expectedInvocations), m.CloseLastReceptionsMock.expectedInvocationsOrigin, afterCloseLastReceptionsCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PostCloseLastReceptionsMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCloseLastReceptionsInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PostCloseLastReceptionsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PostCloseLastReceptionsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseLastReceptionsDone()
}
