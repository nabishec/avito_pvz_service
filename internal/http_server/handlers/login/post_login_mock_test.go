// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package login

//go:generate minimock -i github.com/nabishec/avito_pvz_service/internal/http_server/handlers/login.PostLogin -o post_login_mock_test.go -n PostLoginMock -p login

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// PostLoginMock implements PostLogin
type PostLoginMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcLogin          func(email string, password string) (userID uuid.UUID, role string, err error)
	funcLoginOrigin    string
	inspectFuncLogin   func(email string, password string)
	afterLoginCounter  uint64
	beforeLoginCounter uint64
	LoginMock          mPostLoginMockLogin
}

// NewPostLoginMock returns a mock for PostLogin
func NewPostLoginMock(t minimock.Tester) *PostLoginMock {
	m := &PostLoginMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.LoginMock = mPostLoginMockLogin{mock: m}
	m.LoginMock.callArgs = []*PostLoginMockLoginParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPostLoginMockLogin struct {
	optional           bool
	mock               *PostLoginMock
	defaultExpectation *PostLoginMockLoginExpectation
	expectations       []*PostLoginMockLoginExpectation

	callArgs []*PostLoginMockLoginParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PostLoginMockLoginExpectation specifies expectation struct of the PostLogin.Login
type PostLoginMockLoginExpectation struct {
	mock               *PostLoginMock
	params             *PostLoginMockLoginParams
	paramPtrs          *PostLoginMockLoginParamPtrs
	expectationOrigins PostLoginMockLoginExpectationOrigins
	results            *PostLoginMockLoginResults
	returnOrigin       string
	Counter            uint64
}

// PostLoginMockLoginParams contains parameters of the PostLogin.Login
type PostLoginMockLoginParams struct {
	email    string
	password string
}

// PostLoginMockLoginParamPtrs contains pointers to parameters of the PostLogin.Login
type PostLoginMockLoginParamPtrs struct {
	email    *string
	password *string
}

// PostLoginMockLoginResults contains results of the PostLogin.Login
type PostLoginMockLoginResults struct {
	userID uuid.UUID
	role   string
	err    error
}

// PostLoginMockLoginOrigins contains origins of expectations of the PostLogin.Login
type PostLoginMockLoginExpectationOrigins struct {
	origin         string
	originEmail    string
	originPassword string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLogin *mPostLoginMockLogin) Optional() *mPostLoginMockLogin {
	mmLogin.optional = true
	return mmLogin
}

// Expect sets up expected params for PostLogin.Login
func (mmLogin *mPostLoginMockLogin) Expect(email string, password string) *mPostLoginMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("PostLoginMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &PostLoginMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.paramPtrs != nil {
		mmLogin.mock.t.Fatalf("PostLoginMock.Login mock is already set by ExpectParams functions")
	}

	mmLogin.defaultExpectation.params = &PostLoginMockLoginParams{email, password}
	mmLogin.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmLogin.expectations {
		if minimock.Equal(e.params, mmLogin.defaultExpectation.params) {
			mmLogin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLogin.defaultExpectation.params)
		}
	}

	return mmLogin
}

// ExpectEmailParam1 sets up expected param email for PostLogin.Login
func (mmLogin *mPostLoginMockLogin) ExpectEmailParam1(email string) *mPostLoginMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("PostLoginMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &PostLoginMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("PostLoginMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &PostLoginMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.email = &email
	mmLogin.defaultExpectation.expectationOrigins.originEmail = minimock.CallerInfo(1)

	return mmLogin
}

// ExpectPasswordParam2 sets up expected param password for PostLogin.Login
func (mmLogin *mPostLoginMockLogin) ExpectPasswordParam2(password string) *mPostLoginMockLogin {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("PostLoginMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &PostLoginMockLoginExpectation{}
	}

	if mmLogin.defaultExpectation.params != nil {
		mmLogin.mock.t.Fatalf("PostLoginMock.Login mock is already set by Expect")
	}

	if mmLogin.defaultExpectation.paramPtrs == nil {
		mmLogin.defaultExpectation.paramPtrs = &PostLoginMockLoginParamPtrs{}
	}
	mmLogin.defaultExpectation.paramPtrs.password = &password
	mmLogin.defaultExpectation.expectationOrigins.originPassword = minimock.CallerInfo(1)

	return mmLogin
}

// Inspect accepts an inspector function that has same arguments as the PostLogin.Login
func (mmLogin *mPostLoginMockLogin) Inspect(f func(email string, password string)) *mPostLoginMockLogin {
	if mmLogin.mock.inspectFuncLogin != nil {
		mmLogin.mock.t.Fatalf("Inspect function is already set for PostLoginMock.Login")
	}

	mmLogin.mock.inspectFuncLogin = f

	return mmLogin
}

// Return sets up results that will be returned by PostLogin.Login
func (mmLogin *mPostLoginMockLogin) Return(userID uuid.UUID, role string, err error) *PostLoginMock {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("PostLoginMock.Login mock is already set by Set")
	}

	if mmLogin.defaultExpectation == nil {
		mmLogin.defaultExpectation = &PostLoginMockLoginExpectation{mock: mmLogin.mock}
	}
	mmLogin.defaultExpectation.results = &PostLoginMockLoginResults{userID, role, err}
	mmLogin.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// Set uses given function f to mock the PostLogin.Login method
func (mmLogin *mPostLoginMockLogin) Set(f func(email string, password string) (userID uuid.UUID, role string, err error)) *PostLoginMock {
	if mmLogin.defaultExpectation != nil {
		mmLogin.mock.t.Fatalf("Default expectation is already set for the PostLogin.Login method")
	}

	if len(mmLogin.expectations) > 0 {
		mmLogin.mock.t.Fatalf("Some expectations are already set for the PostLogin.Login method")
	}

	mmLogin.mock.funcLogin = f
	mmLogin.mock.funcLoginOrigin = minimock.CallerInfo(1)
	return mmLogin.mock
}

// When sets expectation for the PostLogin.Login which will trigger the result defined by the following
// Then helper
func (mmLogin *mPostLoginMockLogin) When(email string, password string) *PostLoginMockLoginExpectation {
	if mmLogin.mock.funcLogin != nil {
		mmLogin.mock.t.Fatalf("PostLoginMock.Login mock is already set by Set")
	}

	expectation := &PostLoginMockLoginExpectation{
		mock:               mmLogin.mock,
		params:             &PostLoginMockLoginParams{email, password},
		expectationOrigins: PostLoginMockLoginExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmLogin.expectations = append(mmLogin.expectations, expectation)
	return expectation
}

// Then sets up PostLogin.Login return parameters for the expectation previously defined by the When method
func (e *PostLoginMockLoginExpectation) Then(userID uuid.UUID, role string, err error) *PostLoginMock {
	e.results = &PostLoginMockLoginResults{userID, role, err}
	return e.mock
}

// Times sets number of times PostLogin.Login should be invoked
func (mmLogin *mPostLoginMockLogin) Times(n uint64) *mPostLoginMockLogin {
	if n == 0 {
		mmLogin.mock.t.Fatalf("Times of PostLoginMock.Login mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLogin.expectedInvocations, n)
	mmLogin.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmLogin
}

func (mmLogin *mPostLoginMockLogin) invocationsDone() bool {
	if len(mmLogin.expectations) == 0 && mmLogin.defaultExpectation == nil && mmLogin.mock.funcLogin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLogin.mock.afterLoginCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLogin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Login implements PostLogin
func (mmLogin *PostLoginMock) Login(email string, password string) (userID uuid.UUID, role string, err error) {
	mm_atomic.AddUint64(&mmLogin.beforeLoginCounter, 1)
	defer mm_atomic.AddUint64(&mmLogin.afterLoginCounter, 1)

	mmLogin.t.Helper()

	if mmLogin.inspectFuncLogin != nil {
		mmLogin.inspectFuncLogin(email, password)
	}

	mm_params := PostLoginMockLoginParams{email, password}

	// Record call args
	mmLogin.LoginMock.mutex.Lock()
	mmLogin.LoginMock.callArgs = append(mmLogin.LoginMock.callArgs, &mm_params)
	mmLogin.LoginMock.mutex.Unlock()

	for _, e := range mmLogin.LoginMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.userID, e.results.role, e.results.err
		}
	}

	if mmLogin.LoginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLogin.LoginMock.defaultExpectation.Counter, 1)
		mm_want := mmLogin.LoginMock.defaultExpectation.params
		mm_want_ptrs := mmLogin.LoginMock.defaultExpectation.paramPtrs

		mm_got := PostLoginMockLoginParams{email, password}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.email != nil && !minimock.Equal(*mm_want_ptrs.email, mm_got.email) {
				mmLogin.t.Errorf("PostLoginMock.Login got unexpected parameter email, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originEmail, *mm_want_ptrs.email, mm_got.email, minimock.Diff(*mm_want_ptrs.email, mm_got.email))
			}

			if mm_want_ptrs.password != nil && !minimock.Equal(*mm_want_ptrs.password, mm_got.password) {
				mmLogin.t.Errorf("PostLoginMock.Login got unexpected parameter password, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLogin.LoginMock.defaultExpectation.expectationOrigins.originPassword, *mm_want_ptrs.password, mm_got.password, minimock.Diff(*mm_want_ptrs.password, mm_got.password))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLogin.t.Errorf("PostLoginMock.Login got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmLogin.LoginMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLogin.LoginMock.defaultExpectation.results
		if mm_results == nil {
			mmLogin.t.Fatal("No results are set for the PostLoginMock.Login")
		}
		return (*mm_results).userID, (*mm_results).role, (*mm_results).err
	}
	if mmLogin.funcLogin != nil {
		return mmLogin.funcLogin(email, password)
	}
	mmLogin.t.Fatalf("Unexpected call to PostLoginMock.Login. %v %v", email, password)
	return
}

// LoginAfterCounter returns a count of finished PostLoginMock.Login invocations
func (mmLogin *PostLoginMock) LoginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.afterLoginCounter)
}

// LoginBeforeCounter returns a count of PostLoginMock.Login invocations
func (mmLogin *PostLoginMock) LoginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogin.beforeLoginCounter)
}

// Calls returns a list of arguments used in each call to PostLoginMock.Login.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLogin *mPostLoginMockLogin) Calls() []*PostLoginMockLoginParams {
	mmLogin.mutex.RLock()

	argCopy := make([]*PostLoginMockLoginParams, len(mmLogin.callArgs))
	copy(argCopy, mmLogin.callArgs)

	mmLogin.mutex.RUnlock()

	return argCopy
}

// MinimockLoginDone returns true if the count of the Login invocations corresponds
// the number of defined expectations
func (m *PostLoginMock) MinimockLoginDone() bool {
	if m.LoginMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LoginMock.invocationsDone()
}

// MinimockLoginInspect logs each unmet expectation
func (m *PostLoginMock) MinimockLoginInspect() {
	for _, e := range m.LoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PostLoginMock.Login at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterLoginCounter := mm_atomic.LoadUint64(&m.afterLoginCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LoginMock.defaultExpectation != nil && afterLoginCounter < 1 {
		if m.LoginMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PostLoginMock.Login at\n%s", m.LoginMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PostLoginMock.Login at\n%s with params: %#v", m.LoginMock.defaultExpectation.expectationOrigins.origin, *m.LoginMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLogin != nil && afterLoginCounter < 1 {
		m.t.Errorf("Expected call to PostLoginMock.Login at\n%s", m.funcLoginOrigin)
	}

	if !m.LoginMock.invocationsDone() && afterLoginCounter > 0 {
		m.t.Errorf("Expected %d calls to PostLoginMock.Login at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.LoginMock.expectedInvocations), m.LoginMock.expectedInvocationsOrigin, afterLoginCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PostLoginMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockLoginInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PostLoginMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PostLoginMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockLoginDone()
}
