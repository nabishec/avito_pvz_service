// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package deletelastproducts

//go:generate minimock -i github.com/nabishec/avito_pvz_service/internal/http_server/handlers/delete_last_products.PostDeleteLastProducts -o post_delete_last_products_mock_test.go -n PostDeleteLastProductsMock -p deletelastproducts

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// PostDeleteLastProductsMock implements PostDeleteLastProducts
type PostDeleteLastProductsMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDeleteLastProducts          func(ctx context.Context, pvzID uuid.UUID) (err error)
	funcDeleteLastProductsOrigin    string
	inspectFuncDeleteLastProducts   func(ctx context.Context, pvzID uuid.UUID)
	afterDeleteLastProductsCounter  uint64
	beforeDeleteLastProductsCounter uint64
	DeleteLastProductsMock          mPostDeleteLastProductsMockDeleteLastProducts
}

// NewPostDeleteLastProductsMock returns a mock for PostDeleteLastProducts
func NewPostDeleteLastProductsMock(t minimock.Tester) *PostDeleteLastProductsMock {
	m := &PostDeleteLastProductsMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteLastProductsMock = mPostDeleteLastProductsMockDeleteLastProducts{mock: m}
	m.DeleteLastProductsMock.callArgs = []*PostDeleteLastProductsMockDeleteLastProductsParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPostDeleteLastProductsMockDeleteLastProducts struct {
	optional           bool
	mock               *PostDeleteLastProductsMock
	defaultExpectation *PostDeleteLastProductsMockDeleteLastProductsExpectation
	expectations       []*PostDeleteLastProductsMockDeleteLastProductsExpectation

	callArgs []*PostDeleteLastProductsMockDeleteLastProductsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PostDeleteLastProductsMockDeleteLastProductsExpectation specifies expectation struct of the PostDeleteLastProducts.DeleteLastProducts
type PostDeleteLastProductsMockDeleteLastProductsExpectation struct {
	mock               *PostDeleteLastProductsMock
	params             *PostDeleteLastProductsMockDeleteLastProductsParams
	paramPtrs          *PostDeleteLastProductsMockDeleteLastProductsParamPtrs
	expectationOrigins PostDeleteLastProductsMockDeleteLastProductsExpectationOrigins
	results            *PostDeleteLastProductsMockDeleteLastProductsResults
	returnOrigin       string
	Counter            uint64
}

// PostDeleteLastProductsMockDeleteLastProductsParams contains parameters of the PostDeleteLastProducts.DeleteLastProducts
type PostDeleteLastProductsMockDeleteLastProductsParams struct {
	ctx   context.Context
	pvzID uuid.UUID
}

// PostDeleteLastProductsMockDeleteLastProductsParamPtrs contains pointers to parameters of the PostDeleteLastProducts.DeleteLastProducts
type PostDeleteLastProductsMockDeleteLastProductsParamPtrs struct {
	ctx   *context.Context
	pvzID *uuid.UUID
}

// PostDeleteLastProductsMockDeleteLastProductsResults contains results of the PostDeleteLastProducts.DeleteLastProducts
type PostDeleteLastProductsMockDeleteLastProductsResults struct {
	err error
}

// PostDeleteLastProductsMockDeleteLastProductsOrigins contains origins of expectations of the PostDeleteLastProducts.DeleteLastProducts
type PostDeleteLastProductsMockDeleteLastProductsExpectationOrigins struct {
	origin      string
	originCtx   string
	originPvzID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteLastProducts *mPostDeleteLastProductsMockDeleteLastProducts) Optional() *mPostDeleteLastProductsMockDeleteLastProducts {
	mmDeleteLastProducts.optional = true
	return mmDeleteLastProducts
}

// Expect sets up expected params for PostDeleteLastProducts.DeleteLastProducts
func (mmDeleteLastProducts *mPostDeleteLastProductsMockDeleteLastProducts) Expect(ctx context.Context, pvzID uuid.UUID) *mPostDeleteLastProductsMockDeleteLastProducts {
	if mmDeleteLastProducts.mock.funcDeleteLastProducts != nil {
		mmDeleteLastProducts.mock.t.Fatalf("PostDeleteLastProductsMock.DeleteLastProducts mock is already set by Set")
	}

	if mmDeleteLastProducts.defaultExpectation == nil {
		mmDeleteLastProducts.defaultExpectation = &PostDeleteLastProductsMockDeleteLastProductsExpectation{}
	}

	if mmDeleteLastProducts.defaultExpectation.paramPtrs != nil {
		mmDeleteLastProducts.mock.t.Fatalf("PostDeleteLastProductsMock.DeleteLastProducts mock is already set by ExpectParams functions")
	}

	mmDeleteLastProducts.defaultExpectation.params = &PostDeleteLastProductsMockDeleteLastProductsParams{ctx, pvzID}
	mmDeleteLastProducts.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteLastProducts.expectations {
		if minimock.Equal(e.params, mmDeleteLastProducts.defaultExpectation.params) {
			mmDeleteLastProducts.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteLastProducts.defaultExpectation.params)
		}
	}

	return mmDeleteLastProducts
}

// ExpectCtxParam1 sets up expected param ctx for PostDeleteLastProducts.DeleteLastProducts
func (mmDeleteLastProducts *mPostDeleteLastProductsMockDeleteLastProducts) ExpectCtxParam1(ctx context.Context) *mPostDeleteLastProductsMockDeleteLastProducts {
	if mmDeleteLastProducts.mock.funcDeleteLastProducts != nil {
		mmDeleteLastProducts.mock.t.Fatalf("PostDeleteLastProductsMock.DeleteLastProducts mock is already set by Set")
	}

	if mmDeleteLastProducts.defaultExpectation == nil {
		mmDeleteLastProducts.defaultExpectation = &PostDeleteLastProductsMockDeleteLastProductsExpectation{}
	}

	if mmDeleteLastProducts.defaultExpectation.params != nil {
		mmDeleteLastProducts.mock.t.Fatalf("PostDeleteLastProductsMock.DeleteLastProducts mock is already set by Expect")
	}

	if mmDeleteLastProducts.defaultExpectation.paramPtrs == nil {
		mmDeleteLastProducts.defaultExpectation.paramPtrs = &PostDeleteLastProductsMockDeleteLastProductsParamPtrs{}
	}
	mmDeleteLastProducts.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteLastProducts.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteLastProducts
}

// ExpectPvzIDParam2 sets up expected param pvzID for PostDeleteLastProducts.DeleteLastProducts
func (mmDeleteLastProducts *mPostDeleteLastProductsMockDeleteLastProducts) ExpectPvzIDParam2(pvzID uuid.UUID) *mPostDeleteLastProductsMockDeleteLastProducts {
	if mmDeleteLastProducts.mock.funcDeleteLastProducts != nil {
		mmDeleteLastProducts.mock.t.Fatalf("PostDeleteLastProductsMock.DeleteLastProducts mock is already set by Set")
	}

	if mmDeleteLastProducts.defaultExpectation == nil {
		mmDeleteLastProducts.defaultExpectation = &PostDeleteLastProductsMockDeleteLastProductsExpectation{}
	}

	if mmDeleteLastProducts.defaultExpectation.params != nil {
		mmDeleteLastProducts.mock.t.Fatalf("PostDeleteLastProductsMock.DeleteLastProducts mock is already set by Expect")
	}

	if mmDeleteLastProducts.defaultExpectation.paramPtrs == nil {
		mmDeleteLastProducts.defaultExpectation.paramPtrs = &PostDeleteLastProductsMockDeleteLastProductsParamPtrs{}
	}
	mmDeleteLastProducts.defaultExpectation.paramPtrs.pvzID = &pvzID
	mmDeleteLastProducts.defaultExpectation.expectationOrigins.originPvzID = minimock.CallerInfo(1)

	return mmDeleteLastProducts
}

// Inspect accepts an inspector function that has same arguments as the PostDeleteLastProducts.DeleteLastProducts
func (mmDeleteLastProducts *mPostDeleteLastProductsMockDeleteLastProducts) Inspect(f func(ctx context.Context, pvzID uuid.UUID)) *mPostDeleteLastProductsMockDeleteLastProducts {
	if mmDeleteLastProducts.mock.inspectFuncDeleteLastProducts != nil {
		mmDeleteLastProducts.mock.t.Fatalf("Inspect function is already set for PostDeleteLastProductsMock.DeleteLastProducts")
	}

	mmDeleteLastProducts.mock.inspectFuncDeleteLastProducts = f

	return mmDeleteLastProducts
}

// Return sets up results that will be returned by PostDeleteLastProducts.DeleteLastProducts
func (mmDeleteLastProducts *mPostDeleteLastProductsMockDeleteLastProducts) Return(err error) *PostDeleteLastProductsMock {
	if mmDeleteLastProducts.mock.funcDeleteLastProducts != nil {
		mmDeleteLastProducts.mock.t.Fatalf("PostDeleteLastProductsMock.DeleteLastProducts mock is already set by Set")
	}

	if mmDeleteLastProducts.defaultExpectation == nil {
		mmDeleteLastProducts.defaultExpectation = &PostDeleteLastProductsMockDeleteLastProductsExpectation{mock: mmDeleteLastProducts.mock}
	}
	mmDeleteLastProducts.defaultExpectation.results = &PostDeleteLastProductsMockDeleteLastProductsResults{err}
	mmDeleteLastProducts.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteLastProducts.mock
}

// Set uses given function f to mock the PostDeleteLastProducts.DeleteLastProducts method
func (mmDeleteLastProducts *mPostDeleteLastProductsMockDeleteLastProducts) Set(f func(ctx context.Context, pvzID uuid.UUID) (err error)) *PostDeleteLastProductsMock {
	if mmDeleteLastProducts.defaultExpectation != nil {
		mmDeleteLastProducts.mock.t.Fatalf("Default expectation is already set for the PostDeleteLastProducts.DeleteLastProducts method")
	}

	if len(mmDeleteLastProducts.expectations) > 0 {
		mmDeleteLastProducts.mock.t.Fatalf("Some expectations are already set for the PostDeleteLastProducts.DeleteLastProducts method")
	}

	mmDeleteLastProducts.mock.funcDeleteLastProducts = f
	mmDeleteLastProducts.mock.funcDeleteLastProductsOrigin = minimock.CallerInfo(1)
	return mmDeleteLastProducts.mock
}

// When sets expectation for the PostDeleteLastProducts.DeleteLastProducts which will trigger the result defined by the following
// Then helper
func (mmDeleteLastProducts *mPostDeleteLastProductsMockDeleteLastProducts) When(ctx context.Context, pvzID uuid.UUID) *PostDeleteLastProductsMockDeleteLastProductsExpectation {
	if mmDeleteLastProducts.mock.funcDeleteLastProducts != nil {
		mmDeleteLastProducts.mock.t.Fatalf("PostDeleteLastProductsMock.DeleteLastProducts mock is already set by Set")
	}

	expectation := &PostDeleteLastProductsMockDeleteLastProductsExpectation{
		mock:               mmDeleteLastProducts.mock,
		params:             &PostDeleteLastProductsMockDeleteLastProductsParams{ctx, pvzID},
		expectationOrigins: PostDeleteLastProductsMockDeleteLastProductsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteLastProducts.expectations = append(mmDeleteLastProducts.expectations, expectation)
	return expectation
}

// Then sets up PostDeleteLastProducts.DeleteLastProducts return parameters for the expectation previously defined by the When method
func (e *PostDeleteLastProductsMockDeleteLastProductsExpectation) Then(err error) *PostDeleteLastProductsMock {
	e.results = &PostDeleteLastProductsMockDeleteLastProductsResults{err}
	return e.mock
}

// Times sets number of times PostDeleteLastProducts.DeleteLastProducts should be invoked
func (mmDeleteLastProducts *mPostDeleteLastProductsMockDeleteLastProducts) Times(n uint64) *mPostDeleteLastProductsMockDeleteLastProducts {
	if n == 0 {
		mmDeleteLastProducts.mock.t.Fatalf("Times of PostDeleteLastProductsMock.DeleteLastProducts mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteLastProducts.expectedInvocations, n)
	mmDeleteLastProducts.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteLastProducts
}

func (mmDeleteLastProducts *mPostDeleteLastProductsMockDeleteLastProducts) invocationsDone() bool {
	if len(mmDeleteLastProducts.expectations) == 0 && mmDeleteLastProducts.defaultExpectation == nil && mmDeleteLastProducts.mock.funcDeleteLastProducts == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteLastProducts.mock.afterDeleteLastProductsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteLastProducts.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteLastProducts implements PostDeleteLastProducts
func (mmDeleteLastProducts *PostDeleteLastProductsMock) DeleteLastProducts(ctx context.Context, pvzID uuid.UUID) (err error) {
	mm_atomic.AddUint64(&mmDeleteLastProducts.beforeDeleteLastProductsCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteLastProducts.afterDeleteLastProductsCounter, 1)

	mmDeleteLastProducts.t.Helper()

	if mmDeleteLastProducts.inspectFuncDeleteLastProducts != nil {
		mmDeleteLastProducts.inspectFuncDeleteLastProducts(ctx, pvzID)
	}

	mm_params := PostDeleteLastProductsMockDeleteLastProductsParams{ctx, pvzID}

	// Record call args
	mmDeleteLastProducts.DeleteLastProductsMock.mutex.Lock()
	mmDeleteLastProducts.DeleteLastProductsMock.callArgs = append(mmDeleteLastProducts.DeleteLastProductsMock.callArgs, &mm_params)
	mmDeleteLastProducts.DeleteLastProductsMock.mutex.Unlock()

	for _, e := range mmDeleteLastProducts.DeleteLastProductsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteLastProducts.DeleteLastProductsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteLastProducts.DeleteLastProductsMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteLastProducts.DeleteLastProductsMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteLastProducts.DeleteLastProductsMock.defaultExpectation.paramPtrs

		mm_got := PostDeleteLastProductsMockDeleteLastProductsParams{ctx, pvzID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteLastProducts.t.Errorf("PostDeleteLastProductsMock.DeleteLastProducts got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteLastProducts.DeleteLastProductsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pvzID != nil && !minimock.Equal(*mm_want_ptrs.pvzID, mm_got.pvzID) {
				mmDeleteLastProducts.t.Errorf("PostDeleteLastProductsMock.DeleteLastProducts got unexpected parameter pvzID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteLastProducts.DeleteLastProductsMock.defaultExpectation.expectationOrigins.originPvzID, *mm_want_ptrs.pvzID, mm_got.pvzID, minimock.Diff(*mm_want_ptrs.pvzID, mm_got.pvzID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteLastProducts.t.Errorf("PostDeleteLastProductsMock.DeleteLastProducts got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteLastProducts.DeleteLastProductsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteLastProducts.DeleteLastProductsMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteLastProducts.t.Fatal("No results are set for the PostDeleteLastProductsMock.DeleteLastProducts")
		}
		return (*mm_results).err
	}
	if mmDeleteLastProducts.funcDeleteLastProducts != nil {
		return mmDeleteLastProducts.funcDeleteLastProducts(ctx, pvzID)
	}
	mmDeleteLastProducts.t.Fatalf("Unexpected call to PostDeleteLastProductsMock.DeleteLastProducts. %v %v", ctx, pvzID)
	return
}

// DeleteLastProductsAfterCounter returns a count of finished PostDeleteLastProductsMock.DeleteLastProducts invocations
func (mmDeleteLastProducts *PostDeleteLastProductsMock) DeleteLastProductsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteLastProducts.afterDeleteLastProductsCounter)
}

// DeleteLastProductsBeforeCounter returns a count of PostDeleteLastProductsMock.DeleteLastProducts invocations
func (mmDeleteLastProducts *PostDeleteLastProductsMock) DeleteLastProductsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteLastProducts.beforeDeleteLastProductsCounter)
}

// Calls returns a list of arguments used in each call to PostDeleteLastProductsMock.DeleteLastProducts.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteLastProducts *mPostDeleteLastProductsMockDeleteLastProducts) Calls() []*PostDeleteLastProductsMockDeleteLastProductsParams {
	mmDeleteLastProducts.mutex.RLock()

	argCopy := make([]*PostDeleteLastProductsMockDeleteLastProductsParams, len(mmDeleteLastProducts.callArgs))
	copy(argCopy, mmDeleteLastProducts.callArgs)

	mmDeleteLastProducts.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteLastProductsDone returns true if the count of the DeleteLastProducts invocations corresponds
// the number of defined expectations
func (m *PostDeleteLastProductsMock) MinimockDeleteLastProductsDone() bool {
	if m.DeleteLastProductsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteLastProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteLastProductsMock.invocationsDone()
}

// MinimockDeleteLastProductsInspect logs each unmet expectation
func (m *PostDeleteLastProductsMock) MinimockDeleteLastProductsInspect() {
	for _, e := range m.DeleteLastProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PostDeleteLastProductsMock.DeleteLastProducts at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteLastProductsCounter := mm_atomic.LoadUint64(&m.afterDeleteLastProductsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteLastProductsMock.defaultExpectation != nil && afterDeleteLastProductsCounter < 1 {
		if m.DeleteLastProductsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PostDeleteLastProductsMock.DeleteLastProducts at\n%s", m.DeleteLastProductsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PostDeleteLastProductsMock.DeleteLastProducts at\n%s with params: %#v", m.DeleteLastProductsMock.defaultExpectation.expectationOrigins.origin, *m.DeleteLastProductsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteLastProducts != nil && afterDeleteLastProductsCounter < 1 {
		m.t.Errorf("Expected call to PostDeleteLastProductsMock.DeleteLastProducts at\n%s", m.funcDeleteLastProductsOrigin)
	}

	if !m.DeleteLastProductsMock.invocationsDone() && afterDeleteLastProductsCounter > 0 {
		m.t.Errorf("Expected %d calls to PostDeleteLastProductsMock.DeleteLastProducts at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteLastProductsMock.expectedInvocations), m.DeleteLastProductsMock.expectedInvocationsOrigin, afterDeleteLastProductsCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PostDeleteLastProductsMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeleteLastProductsInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PostDeleteLastProductsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PostDeleteLastProductsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteLastProductsDone()
}
