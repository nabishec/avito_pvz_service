basePath: /
definitions:
  model.AuthResponse:
    properties:
      token:
        type: string
    type: object
  model.ErrorResponse:
    properties:
      errors:
        type: string
    type: object
  model.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  model.PVZReq:
    properties:
      city:
        type: string
    required:
    - city
    type: object
  model.PVZResp:
    properties:
      city:
        type: string
      id:
        type: string
      registration_date:
        type: string
    type: object
  model.PVZWithRecep:
    properties:
      pvz:
        $ref: '#/definitions/model.PVZResp'
      receptions:
        items:
          $ref: '#/definitions/model.ReceptionsItem'
        type: array
    type: object
  model.ProductsReq:
    properties:
      pvz_id:
        type: string
      type:
        type: string
    required:
    - pvz_id
    - type
    type: object
  model.ProductsResp:
    properties:
      date_time:
        type: string
      id:
        type: string
      reception_id:
        type: string
      type:
        type: string
    type: object
  model.ReceptionsItem:
    properties:
      products:
        items:
          $ref: '#/definitions/model.ProductsResp'
        type: array
      reception:
        $ref: '#/definitions/model.ReceptionsResp'
    type: object
  model.ReceptionsReq:
    properties:
      pvz_id:
        type: string
    required:
    - pvz_id
    type: object
  model.ReceptionsResp:
    properties:
      date_time:
        type: string
      id:
        type: string
      pvz_id:
        type: string
      status:
        type: string
    type: object
  model.RegisterReq:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
    required:
    - email
    - password
    - role
    type: object
  model.RegisterResp:
    properties:
      email:
        type: string
      id:
        type: string
      role:
        type: string
    type: object
  model.RootTokenReq:
    properties:
      role:
        type: string
    required:
    - role
    type: object
  model.SuccResp:
    properties:
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: API Avito PVZ Service
  version: 1.0.0
paths:
  /dummyLogin:
    post:
      consumes:
      - application/json
      description: Возвращает JWT-токен с указанной ролью (employee или moderator)
      parameters:
      - description: Роль для тестового токена
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RootTokenReq'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная авторизация.
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Неверный запрос.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Получение тестового токена
  /login:
    post:
      consumes:
      - application/json
      description: Авторизация пользователя
      parameters:
      - description: Данные авторизации пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная авторизация
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Неверный запрос.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Авторизация
  /products:
    post:
      consumes:
      - application/json
      description: Добавление товара в текущую приемку (только для сотрудников ПВЗ)
      parameters:
      - description: Данные продукта
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ProductsReq'
      produces:
      - application/json
      responses:
        "201":
          description: Товар добавлен.
          schema:
            $ref: '#/definitions/model.ProductsResp'
        "400":
          description: Неверный запрос или нет активной приемки.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Неавторизован.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Доступ запрещен.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Добавление товара
  /pvz:
    get:
      consumes:
      - application/json
      description: Получение списка ПВЗ с фильтрацией по дате приемки и пагинацией
      parameters:
      - description: Начальная дата
        in: query
        name: startDate
        type: string
      - description: Конечная дата
        in: query
        name: endDate
        type: string
      - default: 1
        description: Номер страницы (начиная с 1)
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Количество элементов на странице
        in: query
        maximum: 30
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список ПВЗ
          schema:
            items:
              $ref: '#/definitions/model.PVZWithRecep'
            type: array
        "400":
          description: Неверный формат параметров
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Неавторизован.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Доступ запрещен.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение списка ПВЗ
    post:
      consumes:
      - application/json
      description: Добавляет новый ПВЗ
      parameters:
      - description: Город нового ПВЗ
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.PVZReq'
      produces:
      - application/json
      responses:
        "201":
          description: ПВЗ создан
          schema:
            $ref: '#/definitions/model.PVZResp'
        "400":
          description: Неверный запрос.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Неавторизован.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Доступ запрещен.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Добавление нового ПВЗ
  /pvz/{pvzId}/close_last_reception:
    post:
      consumes:
      - application/json
      description: Закрытие последней открытой приемки товаров в рамках ПВЗ
      parameters:
      - description: ID ПВЗ
        in: path
        name: pvzId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Приемка закрыта
          schema:
            $ref: '#/definitions/model.SuccResp'
        "400":
          description: Неверный запрос или приемка уже закрыта
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Неавторизован.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Доступ запрещен.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Закрытие приемки
  /pvz/{pvzId}/delete_last_product:
    post:
      consumes:
      - application/json
      description: Удаление последнего добавленного товара из текущей приемки (LIFO,
        только для сотрудников ПВЗ)
      parameters:
      - description: ID ПВЗ
        in: path
        name: pvzId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Товар удален
          schema:
            $ref: '#/definitions/model.SuccResp'
        "400":
          description: Неверный запрос, нет активной приемки или нет товаров для удаления
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Неавторизован.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Доступ запрещен.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление товара
  /receptions:
    post:
      consumes:
      - application/json
      description: Создание новой приемки товаров (только для сотрудников ПВЗ)
      parameters:
      - description: ID ПВЗ
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ReceptionsReq'
      produces:
      - application/json
      responses:
        "201":
          description: Приемка создана.
          schema:
            $ref: '#/definitions/model.ReceptionsResp'
        "400":
          description: Неверный запрос или есть незакрытая приемка.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Неавторизован.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Доступ запрещен.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Добавление новой приемки
  /register:
    post:
      consumes:
      - application/json
      description: Регистрация пользователя
      parameters:
      - description: Данные нового пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь создан
          schema:
            $ref: '#/definitions/model.RegisterResp'
        "400":
          description: Неверный запрос.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера.
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Регистрация
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
